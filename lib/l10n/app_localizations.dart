// GENERATED CODE - DO NOT MODIFY BY HAND
// This file was generated by Flutter's gen-l10n tool based on your ARB files
// in lib/l10n/app_en.arb and lib/l10n/app_ar.arb.

import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

abstract class AppLocalizations {
  AppLocalizations(this.localeName);

  /// The locale for which the translations apply
  final String localeName;

  /// Utility method to retrieve the localization instance from the context
  static AppLocalizations? of(BuildContext context) {
    return Localizations.of<AppLocalizations>(context, AppLocalizations);
  }

  /// Delegate that loads and caches localized resources
  static const LocalizationsDelegate<AppLocalizations> delegate =
  _AppLocalizationsDelegate();

  /// The list of supported locales
  static const List<Locale> supportedLocales = <Locale>[
    Locale('en'),
    Locale('ar'),
  ];

  // --- List your getters here, one for each key in your ARB files ---

  String get appTitle;
  String get homeAllPlants;
  String get settings;
  String get darkMode;
  String get switchLanguage;
  String get scanCamera;
  String get scanGallery;
  String get description;
  String get diseases;
  String get careGuides;

  String get scanTitle;
  String get noImageChosen;
  String get identifying;
  String get showPlantDetails;
  String get cancel;
}

class _AppLocalizationsDelegate
    extends LocalizationsDelegate<AppLocalizations> {
  const _AppLocalizationsDelegate();

  @override
  bool isSupported(Locale locale) =>
      AppLocalizations.supportedLocales
          .any((l) => l.languageCode == locale.languageCode);

  @override
  Future<AppLocalizations> load(Locale locale) {
    // Since our localizations are synchronous, wrap in a SynchronousFuture
    return SynchronousFuture<AppLocalizations>(
      _lookupAppLocalizations(locale),
    );
  }

  @override
  bool shouldReload(_AppLocalizationsDelegate old) => false;
}

AppLocalizations _lookupAppLocalizations(Locale locale) {
  switch (locale.languageCode) {
    case 'ar':
      return AppLocalizationsAr();
    case 'en':
    default:
      return AppLocalizationsEn();
  }
}

/// English translations
class AppLocalizationsEn extends AppLocalizations {
  AppLocalizationsEn() : super('en');

  @override
  String get appTitle => 'Plant Care';

  @override
  String get homeAllPlants => 'All Plants';

  @override
  String get settings => 'Settings';

  @override
  String get darkMode => 'Dark Mode';

  @override
  String get switchLanguage => 'Switch to Arabic';

  @override
  String get scanCamera => 'Take Photo';

  @override
  String get scanGallery => 'Insert Photo';

  @override
  String get description => 'Description';

  @override
  String get diseases => 'Diseases';

  @override
  String get careGuides => 'Care Guides';

  @override
  String get scanTitle => 'Scan';

  @override
  String get noImageChosen => 'No image chosen';

  @override
  String get identifying => 'Identifying…';

  @override
  String get showPlantDetails => 'Show Plant Details';

  @override
  String get cancel => 'Cancel';
}

/// Arabic translations
class AppLocalizationsAr extends AppLocalizations {
  AppLocalizationsAr() : super('ar');

  @override
  String get appTitle => 'رعاية النباتات';

  @override
  String get homeAllPlants => 'كافة النباتات';

  @override
  String get settings => 'الإعدادات';

  @override
  String get darkMode => 'الوضع الداكن';

  @override
  String get switchLanguage => 'Switch to English';

  @override
  String get scanCamera => 'التقط صورة';

  @override
  String get scanGallery => 'إدراج صورة';

  @override
  String get description => 'الوصف';

  @override
  String get diseases => 'الأمراض';

  @override
  String get careGuides => 'دليل الرعاية';

  @override
  String get scanTitle => 'المسح';

  @override
  String get noImageChosen => 'لم يتم اختيار صورة';

  @override
  String get identifying => 'جاري التعرف…';

  @override
  String get showPlantDetails => 'عرض تفاصيل النبات';

  @override
  String get cancel => 'إلغاء';
}
